# Hartmann Heat Pump - Text Sensor Components (English)

text_sensor:
  - platform: version
    name: "ESPHome Version"
  
  - platform: wifi_info
    ip_address:
      name: "IP Address"
    ssid:
      name: "Connected WiFi"

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Work Mode"
    id: work_mode
    register_type: holding
    address: 40216  # Current work mode readback
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("Cooling");
        case 1: return std::string("Heating");
        case 2: return std::string("DHW");
        case 3: return std::string("Cooling + DHW");
        case 4: return std::string("Heating + DHW");
        default: return std::string("Unknown");
      }

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "System Status"
    id: system_status_text
    register_type: holding
    address: 40218  # System status
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("Ready");
        case 1: return std::string("Running");
        case 2: return std::string("Stop - Alarm");
        case 3: return std::string("Stop - Timer");
        case 4: return std::string("Stop - Service");
        case 5: return std::string("Stop - Emergency");
        case 6: return std::string("Stop - Button");
        case 7: return std::string("Manual Mode");
        case 8: return std::string("Antifreeze");
        case 9: return std::string("Stop - AC Linkage");
        case 10: return std::string("Mode Change");
        default: return std::string("Unknown");
      }