# Hartmann Heat Pump ESPHome Integration
# Multi-language support: English / Polish
#
# Copyright 2025 Hartmann Heat Pump Integration
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# =============================================================================
# LANGUAGE SELECTION / WYBÃ“R JÄ˜ZYKA
# =============================================================================
# 
# ðŸ‡¬ðŸ‡§ ENGLISH: Choose your language by uncommenting ONE of the language options below:
# ðŸ‡µðŸ‡± POLSKI: Wybierz jÄ™zyk odkomentowujÄ…c JEDNÄ„ z opcji jÄ™zykowych poniÅ¼ej:
#
# For English interface, uncomment this line:
# language_pack: "EN"
#
# For Polish interface, uncomment this line:
language_pack: "PL"
#
# =============================================================================

substitutions:
  name: "hartmann-heat-pump"
  friendly_name: "Hartmann Heat Pump"
  device_description: "ESPHome integration for Hartmann heat pump via Modbus RTU"
  
  # Modbus Configuration
  modbus_controller_id: "hartmann_modbus_controller"
  modbus_heat_pump_address: !secret modbus_heat_pump_address
  baud_rate: !secret baud_rate
  update_interval: "5s"
  
  # Safety Configuration
  safe_mode_delay: !secret safe_mode_delay
  default_target_temp_heating: !secret default_target_temp_heating
  default_target_temp_cooling: !secret default_target_temp_cooling

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: ${device_description}
  project:
    name: "hartmann.heat_pump"
    version: "2.0.0"
  # Language package inclusion
  includes:
    - packages/sensors/hartmann_sensors_${language_pack}.yaml

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  # Uncomment next line for debug mode
  # level: VERBOSE

# Enable Home Assistant API
api:
  encryption:
    key: !secret hartmann_api_key

# Enable OTA updates
ota:
  - platform: esphome
    password: !secret hartmann_ota_password

# WiFi configuration
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name} Fallback Hotspot"
    password: !secret hartmann_fallback_password

captive_portal:

# Web server (optional - for direct access to device)
web_server:
  port: 80

# Status LED (optional)
status_led:
  pin:
    number: GPIO2
    inverted: true

# UART configuration for Modbus
uart:
  - id: uart_modbus
    tx_pin: GPIO17
    rx_pin: GPIO16
    baud_rate: ${baud_rate}
    parity: NONE
    stop_bits: 1
    # Uncomment if you need flow control
    # flow_control_pin: GPIO4

# Modbus controller
modbus:
  - id: ${modbus_controller_id}
    uart_id: uart_modbus

modbus_controller:
  - id: ${modbus_controller_id}
    address: ${modbus_heat_pump_address}
    modbus_id: ${modbus_controller_id}
    update_interval: ${update_interval}

# Global variables for safety mode
globals:
  - id: ha_connected
    type: bool
    restore_value: no
    initial_value: 'false'
  
  - id: safe_mode_active
    type: bool
    restore_value: no
    initial_value: 'false'

# Connection status monitoring
binary_sensor:
  - platform: status
    name: "System Status"
    id: system_status
    on_state:
      then:
        - globals.set:
            id: ha_connected
            value: !lambda 'return x;'
        - if:
            condition:
              lambda: 'return !x;'
            then:
              - delay: ${safe_mode_delay}
              - if:
                  condition:
                    lambda: 'return !id(ha_connected);'
                  then:
                    - globals.set:
                        id: safe_mode_active
                        value: 'true'
                    - logger.log: "Entering safe mode - Home Assistant disconnected"

# Include language-specific sensor package
packages:
  sensor_package: !include packages/sensors/hartmann_sensors_${language_pack}.yaml

# Climate component for Home Assistant integration
climate:
  - platform: thermostat
    name: "Hartmann Heat Pump"
    id: heat_pump_climate
    sensor: outlet_temp  # Use outlet water temperature as current temperature
    default_preset: "comfort"
    min_heating_off_time: 300s
    min_heating_run_time: 300s
    min_cooling_off_time: 300s
    min_cooling_run_time: 300s
    min_idle_time: 30s
    
    heat_action:
      - logger.log: "Setting heat pump to heating mode"
      - select.set:
          id: work_mode_select
          option: !lambda |-
            if ("${language_pack}" == "PL") {
              return "Ogrzewanie";
            } else {
              return "Heating";
            }
    
    cool_action:
      - logger.log: "Setting heat pump to cooling mode"
      - select.set:
          id: work_mode_select
          option: !lambda |-
            if ("${language_pack}" == "PL") {
              return "ChÅ‚odzenie";
            } else {
              return "Cooling";
            }
    
    idle_action:
      - logger.log: "Setting heat pump to idle"
      - switch.turn_off: unit_power

# Interval component for safety monitoring
interval:
  - interval: 30s
    then:
      - if:
          condition:
            lambda: 'return id(safe_mode_active);'
          then:
            - logger.log: "Safe mode active - heat pump controlled locally"
            - switch.turn_on: unit_power  # Keep unit running in safe mode

# Safety and monitoring automation
automation:
  # Temperature safety limits
  - automation_id: high_temp_safety
    trigger:
      - platform: numeric_state
        entity_id: outlet_temp
        above: 65.0  # Safety limit for outlet temperature
    action:
      - logger.log:
          format: "SAFETY: High outlet temperature detected: %.1fÂ°C"
          args: ['id(outlet_temp).state']
      - switch.turn_off: unit_power

  # Low temperature protection
  - automation_id: antifreeze_protection
    trigger:
      - platform: numeric_state
        entity_id: ambient_temp
        below: -15.0
    action:
      - logger.log:
          format: "SAFETY: Antifreeze protection activated at %.1fÂ°C"
          args: ['id(ambient_temp).state']
      # Heat pump will handle antifreeze internally

  # Flow switch monitoring
  - automation_id: flow_monitoring
    trigger:
      - platform: state
        entity_id: flow_switch
        to: 'off'
    action:
      - logger.log: "WARNING: Water flow switch indicates no flow"
      - delay: 10s
      - if:
          condition:
            binary_sensor.is_off: flow_switch
          then:
            - logger.log: "SAFETY: Shutting down due to no water flow"
            - switch.turn_off: unit_power