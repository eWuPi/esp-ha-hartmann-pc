
substitutions:
  name: "hartmann-heat-pump"
  friendly_name: "Hartmann Heat Pump"
  device_description: "ESPHome integration for Hartmann heat pump via Modbus RTU"
  
  # Modbus controller ID for packages
  modbus_controller_id: "hartmann_modbus_controller"
  
  # Safety Configuration
  safe_mode_delay: "600s"
  default_target_temp_heating: "21"
  default_target_temp_cooling: "24"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: ${device_description}
  project:
    name: "hartmann.heat_pump"
    version: "2.0.0"

esp32:
  board: esp32dev
  framework:
    type: esp-idf

logger:

api:
  encryption:
    key: !secret api_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Hartmann HP Fallback"
    password: !secret hartmann_fallback_password

captive_portal:

web_server:
  port: 80

status_led:
  pin:
    number: GPIO2
    inverted: true

uart:
  - id: uart_modbus
    tx_pin: GPIO17
    rx_pin: GPIO16
    baud_rate: 19200
    parity: NONE
    stop_bits: 1

modbus:
  - id: hartmann_modbus
    uart_id: uart_modbus

modbus_controller:
  - id: ${modbus_controller_id}
    address: 1
    modbus_id: hartmann_modbus
    update_interval: 5s

globals:
  - id: ha_connected
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: safe_mode_active
    type: bool
    restore_value: no
    initial_value: 'false'

binary_sensor:
  - platform: status
    name: "System Status"
    id: system_status
    on_state:
      then:
        - globals.set:
            id: ha_connected
            value: !lambda 'return x;'
        - if:
            condition:
              lambda: 'return !x;'
            then:
              - delay: ${safe_mode_delay}
              - if:
                  condition:
                    lambda: 'return !id(ha_connected);'
                  then:
                    - globals.set:
                        id: safe_mode_active
                        value: 'true'
                    - logger.log: "Entering safe mode - Home Assistant disconnected"

# Import all Hartmann packages from GitHub
packages:
  hartmann_packages:
    url: https://github.com/eWuPi/esp-ha-hartmann-pc
    ref: main
    refresh: 300s
    files: [
      'packages/translations/PL.yaml',    # Polish interface
      'packages/binary_sensors.yaml',     # 165+ alarms
      'packages/sensors.yaml',            # Temperature, pressure, flow
      'packages/text_sensors.yaml',       # Status sensors
      'packages/climate.yaml',            # Unified climate control
      'packages/select.yaml',             # Mode selections
      'packages/switch.yaml',             # Power switches
      'packages/button.yaml'              # Control buttons
    ]
  
  # For English interface, replace PL.yaml with EN.yaml above

# Safety monitoring
interval:
  - interval: 30s
    then:
      - if:
          condition:
            lambda: 'return id(safe_mode_active);'
          then:
            - logger.log: "Safe mode active - heat pump controlled locally"
            - switch.turn_on: unit_power
      - if:
          condition:
            lambda: 'return id(outlet_temp).state > 65.0;'
          then:
            - logger.log:
                format: "SAFETY: High outlet temperature detected: %.1f°C"
                args: ['id(outlet_temp).state']
            - switch.turn_off: unit_power
      
  - interval: 60s
    then:
      - if:
          condition:
            lambda: 'return id(ambient_temp).state < -15.0;'
          then:
            - logger.log:
                format: "SAFETY: Antifreeze protection activated at %.1f°C"
                args: ['id(ambient_temp).state']